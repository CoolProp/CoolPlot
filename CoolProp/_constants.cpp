/* Generated by Cython 0.22.1 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "..\\..\\include\\DataStructures.h"
        ], 
        "include_dirs": [
            "..\\..\\include", 
            "..\\..\\src", 
            "..\\..\\externals\\Eigen", 
            "..\\..\\externals\\REFPROP-headers", 
            "..\\..\\externals\\msgpack-c\\include", 
            "..\\..\\externals\\IF97"
        ], 
        "language": "c++"
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_22_1"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#define __Pyx_void_to_None(void_result) (void_result, Py_INCREF(Py_None), Py_None)
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(T& ref) : ptr(&ref) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__CoolProp___constants
#define __PYX_HAVE_API__CoolProp___constants
#include "DataStructures.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "CoolProp\\_constants.pyx",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'CoolProp.constants_header' */

/* Module declarations from 'CoolProp._constants' */
#define __Pyx_MODULE_NAME "CoolProp._constants"
int __pyx_module_is_main_CoolProp___constants = 0;

/* Implementation of 'CoolProp._constants' */
static char __pyx_k_iP[] = "iP";
static char __pyx_k_iQ[] = "iQ";
static char __pyx_k_iT[] = "iT";
static char __pyx_k_iZ[] = "iZ";
static char __pyx_k_iFH[] = "iFH";
static char __pyx_k_iHH[] = "iHH";
static char __pyx_k_iPH[] = "iPH";
static char __pyx_k_iODP[] = "iODP";
static char __pyx_k_iPIP[] = "iPIP";
static char __pyx_k_iTau[] = "iTau";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_iDelta[] = "iDelta";
static char __pyx_k_iDmass[] = "iDmass";
static char __pyx_k_iGWP20[] = "iGWP20";
static char __pyx_k_iGmass[] = "iGmass";
static char __pyx_k_iHmass[] = "iHmass";
static char __pyx_k_iP_max[] = "iP_max";
static char __pyx_k_iP_min[] = "iP_min";
static char __pyx_k_iPhase[] = "iPhase";
static char __pyx_k_iSmass[] = "iSmass";
static char __pyx_k_iT_max[] = "iT_max";
static char __pyx_k_iT_min[] = "iT_min";
static char __pyx_k_iUmass[] = "iUmass";
static char __pyx_k_iCpmass[] = "iCpmass";
static char __pyx_k_iCvmass[] = "iCvmass";
static char __pyx_k_iDmolar[] = "iDmolar";
static char __pyx_k_iGWP100[] = "iGWP100";
static char __pyx_k_iGWP500[] = "iGWP500";
static char __pyx_k_iGmolar[] = "iGmolar";
static char __pyx_k_iHmolar[] = "iHmolar";
static char __pyx_k_iSmolar[] = "iSmolar";
static char __pyx_k_iUmolar[] = "iUmolar";
static char __pyx_k_ialpha0[] = "ialpha0";
static char __pyx_k_ialphar[] = "ialphar";
static char __pyx_k_iBvirial[] = "iBvirial";
static char __pyx_k_iCp0mass[] = "iCp0mass";
static char __pyx_k_iCpmolar[] = "iCpmolar";
static char __pyx_k_iCvirial[] = "iCvirial";
static char __pyx_k_iCvmolar[] = "iCvmolar";
static char __pyx_k_iPrandtl[] = "iPrandtl";
static char __pyx_k_PQ_INPUTS[] = "PQ_INPUTS";
static char __pyx_k_PT_INPUTS[] = "PT_INPUTS";
static char __pyx_k_QT_INPUTS[] = "QT_INPUTS";
static char __pyx_k_iCp0molar[] = "iCp0molar";
static char __pyx_k_iP_triple[] = "iP_triple";
static char __pyx_k_iT_freeze[] = "iT_freeze";
static char __pyx_k_iT_triple[] = "iT_triple";
static char __pyx_k_iphase_gas[] = "iphase_gas";
static char __pyx_k_iviscosity[] = "iviscosity";
static char __pyx_k_iP_critical[] = "iP_critical";
static char __pyx_k_iP_reducing[] = "iP_reducing";
static char __pyx_k_iT_critical[] = "iT_critical";
static char __pyx_k_iT_reducing[] = "iT_reducing";
static char __pyx_k_imolar_mass[] = "imolar_mass";
static char __pyx_k_idBvirial_dT[] = "idBvirial_dT";
static char __pyx_k_idCvirial_dT[] = "idCvirial_dT";
static char __pyx_k_ispeed_sound[] = "ispeed_sound";
static char __pyx_k_DmassP_INPUTS[] = "DmassP_INPUTS";
static char __pyx_k_DmassT_INPUTS[] = "DmassT_INPUTS";
static char __pyx_k_HmassP_INPUTS[] = "HmassP_INPUTS";
static char __pyx_k_HmassQ_INPUTS[] = "HmassQ_INPUTS";
static char __pyx_k_HmassT_INPUTS[] = "HmassT_INPUTS";
static char __pyx_k_PSmass_INPUTS[] = "PSmass_INPUTS";
static char __pyx_k_PUmass_INPUTS[] = "PUmass_INPUTS";
static char __pyx_k_QSmass_INPUTS[] = "QSmass_INPUTS";
static char __pyx_k_SmassT_INPUTS[] = "SmassT_INPUTS";
static char __pyx_k_TUmass_INPUTS[] = "TUmass_INPUTS";
static char __pyx_k_iconductivity[] = "iconductivity";
static char __pyx_k_ifraction_max[] = "ifraction_max";
static char __pyx_k_ifraction_min[] = "ifraction_min";
static char __pyx_k_igas_constant[] = "igas_constant";
static char __pyx_k_iphase_liquid[] = "iphase_liquid";
static char __pyx_k_DmolarP_INPUTS[] = "DmolarP_INPUTS";
static char __pyx_k_DmolarT_INPUTS[] = "DmolarT_INPUTS";
static char __pyx_k_HmolarP_INPUTS[] = "HmolarP_INPUTS";
static char __pyx_k_HmolarQ_INPUTS[] = "HmolarQ_INPUTS";
static char __pyx_k_HmolarT_INPUTS[] = "HmolarT_INPUTS";
static char __pyx_k_PSmolar_INPUTS[] = "PSmolar_INPUTS";
static char __pyx_k_PUmolar_INPUTS[] = "PUmolar_INPUTS";
static char __pyx_k_QSmolar_INPUTS[] = "QSmolar_INPUTS";
static char __pyx_k_SmolarT_INPUTS[] = "SmolarT_INPUTS";
static char __pyx_k_TUmolar_INPUTS[] = "TUmolar_INPUTS";
static char __pyx_k_iphase_unknown[] = "iphase_unknown";
static char __pyx_k_FLUID_TYPE_PURE[] = "FLUID_TYPE_PURE";
static char __pyx_k_iphase_twophase[] = "iphase_twophase";
static char __pyx_k_iacentric_factor[] = "iacentric_factor";
static char __pyx_k_isurface_tension[] = "isurface_tension";
static char __pyx_k_DmassHmass_INPUTS[] = "DmassHmass_INPUTS";
static char __pyx_k_DmassSmass_INPUTS[] = "DmassSmass_INPUTS";
static char __pyx_k_DmassUmass_INPUTS[] = "DmassUmass_INPUTS";
static char __pyx_k_HmassSmass_INPUTS[] = "HmassSmass_INPUTS";
static char __pyx_k_INVALID_PARAMETER[] = "INVALID_PARAMETER";
static char __pyx_k_SmassUmass_INPUTS[] = "SmassUmass_INPUTS";
static char __pyx_k_irhomass_critical[] = "irhomass_critical";
static char __pyx_k_irhomass_reducing[] = "irhomass_reducing";
static char __pyx_k_FLUID_TYPE_REFPROP[] = "FLUID_TYPE_REFPROP";
static char __pyx_k_INPUT_PAIR_INVALID[] = "INPUT_PAIR_INVALID";
static char __pyx_k_iphase_not_imposed[] = "iphase_not_imposed";
static char __pyx_k_irhomolar_critical[] = "irhomolar_critical";
static char __pyx_k_irhomolar_reducing[] = "irhomolar_reducing";
static char __pyx_k_DmolarHmolar_INPUTS[] = "DmolarHmolar_INPUTS";
static char __pyx_k_DmolarSmolar_INPUTS[] = "DmolarSmolar_INPUTS";
static char __pyx_k_DmolarUmolar_INPUTS[] = "DmolarUmolar_INPUTS";
static char __pyx_k_HmolarSmolar_INPUTS[] = "HmolarSmolar_INPUTS";
static char __pyx_k_SmolarUmolar_INPUTS[] = "SmolarUmolar_INPUTS";
static char __pyx_k_FLUID_TYPE_UNDEFINED[] = "FLUID_TYPE_UNDEFINED";
static char __pyx_k_iphase_supercritical[] = "iphase_supercritical";
static char __pyx_k_iundefined_parameter[] = "iundefined_parameter";
static char __pyx_k_FLUID_TYPE_PSEUDOPURE[] = "FLUID_TYPE_PSEUDOPURE";
static char __pyx_k_iphase_critical_point[] = "iphase_critical_point";
static char __pyx_k_idalpha0_ddelta_consttau[] = "idalpha0_ddelta_consttau";
static char __pyx_k_idalpha0_dtau_constdelta[] = "idalpha0_dtau_constdelta";
static char __pyx_k_idalphar_ddelta_consttau[] = "idalphar_ddelta_consttau";
static char __pyx_k_idalphar_dtau_constdelta[] = "idalphar_dtau_constdelta";
static char __pyx_k_iphase_supercritical_gas[] = "iphase_supercritical_gas";
static char __pyx_k_iisothermal_compressibility[] = "iisothermal_compressibility";
static char __pyx_k_iphase_supercritical_liquid[] = "iphase_supercritical_liquid";
static char __pyx_k_iisobaric_expansion_coefficient[] = "iisobaric_expansion_coefficient";
static char __pyx_k_FLUID_TYPE_INCOMPRESSIBLE_LIQUID[] = "FLUID_TYPE_INCOMPRESSIBLE_LIQUID";
static char __pyx_k_FLUID_TYPE_INCOMPRESSIBLE_SOLUTI[] = "FLUID_TYPE_INCOMPRESSIBLE_SOLUTION";
static char __pyx_k_ifundamental_derivative_of_gas_d[] = "ifundamental_derivative_of_gas_dynamics";
static PyObject *__pyx_n_s_DmassHmass_INPUTS;
static PyObject *__pyx_n_s_DmassP_INPUTS;
static PyObject *__pyx_n_s_DmassSmass_INPUTS;
static PyObject *__pyx_n_s_DmassT_INPUTS;
static PyObject *__pyx_n_s_DmassUmass_INPUTS;
static PyObject *__pyx_n_s_DmolarHmolar_INPUTS;
static PyObject *__pyx_n_s_DmolarP_INPUTS;
static PyObject *__pyx_n_s_DmolarSmolar_INPUTS;
static PyObject *__pyx_n_s_DmolarT_INPUTS;
static PyObject *__pyx_n_s_DmolarUmolar_INPUTS;
static PyObject *__pyx_n_s_FLUID_TYPE_INCOMPRESSIBLE_LIQUID;
static PyObject *__pyx_n_s_FLUID_TYPE_INCOMPRESSIBLE_SOLUTI;
static PyObject *__pyx_n_s_FLUID_TYPE_PSEUDOPURE;
static PyObject *__pyx_n_s_FLUID_TYPE_PURE;
static PyObject *__pyx_n_s_FLUID_TYPE_REFPROP;
static PyObject *__pyx_n_s_FLUID_TYPE_UNDEFINED;
static PyObject *__pyx_n_s_HmassP_INPUTS;
static PyObject *__pyx_n_s_HmassQ_INPUTS;
static PyObject *__pyx_n_s_HmassSmass_INPUTS;
static PyObject *__pyx_n_s_HmassT_INPUTS;
static PyObject *__pyx_n_s_HmolarP_INPUTS;
static PyObject *__pyx_n_s_HmolarQ_INPUTS;
static PyObject *__pyx_n_s_HmolarSmolar_INPUTS;
static PyObject *__pyx_n_s_HmolarT_INPUTS;
static PyObject *__pyx_n_s_INPUT_PAIR_INVALID;
static PyObject *__pyx_n_s_INVALID_PARAMETER;
static PyObject *__pyx_n_s_PQ_INPUTS;
static PyObject *__pyx_n_s_PSmass_INPUTS;
static PyObject *__pyx_n_s_PSmolar_INPUTS;
static PyObject *__pyx_n_s_PT_INPUTS;
static PyObject *__pyx_n_s_PUmass_INPUTS;
static PyObject *__pyx_n_s_PUmolar_INPUTS;
static PyObject *__pyx_n_s_QSmass_INPUTS;
static PyObject *__pyx_n_s_QSmolar_INPUTS;
static PyObject *__pyx_n_s_QT_INPUTS;
static PyObject *__pyx_n_s_SmassT_INPUTS;
static PyObject *__pyx_n_s_SmassUmass_INPUTS;
static PyObject *__pyx_n_s_SmolarT_INPUTS;
static PyObject *__pyx_n_s_SmolarUmolar_INPUTS;
static PyObject *__pyx_n_s_TUmass_INPUTS;
static PyObject *__pyx_n_s_TUmolar_INPUTS;
static PyObject *__pyx_n_s_iBvirial;
static PyObject *__pyx_n_s_iCp0mass;
static PyObject *__pyx_n_s_iCp0molar;
static PyObject *__pyx_n_s_iCpmass;
static PyObject *__pyx_n_s_iCpmolar;
static PyObject *__pyx_n_s_iCvirial;
static PyObject *__pyx_n_s_iCvmass;
static PyObject *__pyx_n_s_iCvmolar;
static PyObject *__pyx_n_s_iDelta;
static PyObject *__pyx_n_s_iDmass;
static PyObject *__pyx_n_s_iDmolar;
static PyObject *__pyx_n_s_iFH;
static PyObject *__pyx_n_s_iGWP100;
static PyObject *__pyx_n_s_iGWP20;
static PyObject *__pyx_n_s_iGWP500;
static PyObject *__pyx_n_s_iGmass;
static PyObject *__pyx_n_s_iGmolar;
static PyObject *__pyx_n_s_iHH;
static PyObject *__pyx_n_s_iHmass;
static PyObject *__pyx_n_s_iHmolar;
static PyObject *__pyx_n_s_iODP;
static PyObject *__pyx_n_s_iP;
static PyObject *__pyx_n_s_iPH;
static PyObject *__pyx_n_s_iPIP;
static PyObject *__pyx_n_s_iP_critical;
static PyObject *__pyx_n_s_iP_max;
static PyObject *__pyx_n_s_iP_min;
static PyObject *__pyx_n_s_iP_reducing;
static PyObject *__pyx_n_s_iP_triple;
static PyObject *__pyx_n_s_iPhase;
static PyObject *__pyx_n_s_iPrandtl;
static PyObject *__pyx_n_s_iQ;
static PyObject *__pyx_n_s_iSmass;
static PyObject *__pyx_n_s_iSmolar;
static PyObject *__pyx_n_s_iT;
static PyObject *__pyx_n_s_iT_critical;
static PyObject *__pyx_n_s_iT_freeze;
static PyObject *__pyx_n_s_iT_max;
static PyObject *__pyx_n_s_iT_min;
static PyObject *__pyx_n_s_iT_reducing;
static PyObject *__pyx_n_s_iT_triple;
static PyObject *__pyx_n_s_iTau;
static PyObject *__pyx_n_s_iUmass;
static PyObject *__pyx_n_s_iUmolar;
static PyObject *__pyx_n_s_iZ;
static PyObject *__pyx_n_s_iacentric_factor;
static PyObject *__pyx_n_s_ialpha0;
static PyObject *__pyx_n_s_ialphar;
static PyObject *__pyx_n_s_iconductivity;
static PyObject *__pyx_n_s_idBvirial_dT;
static PyObject *__pyx_n_s_idCvirial_dT;
static PyObject *__pyx_n_s_idalpha0_ddelta_consttau;
static PyObject *__pyx_n_s_idalpha0_dtau_constdelta;
static PyObject *__pyx_n_s_idalphar_ddelta_consttau;
static PyObject *__pyx_n_s_idalphar_dtau_constdelta;
static PyObject *__pyx_n_s_ifraction_max;
static PyObject *__pyx_n_s_ifraction_min;
static PyObject *__pyx_n_s_ifundamental_derivative_of_gas_d;
static PyObject *__pyx_n_s_igas_constant;
static PyObject *__pyx_n_s_iisobaric_expansion_coefficient;
static PyObject *__pyx_n_s_iisothermal_compressibility;
static PyObject *__pyx_n_s_imolar_mass;
static PyObject *__pyx_n_s_iphase_critical_point;
static PyObject *__pyx_n_s_iphase_gas;
static PyObject *__pyx_n_s_iphase_liquid;
static PyObject *__pyx_n_s_iphase_not_imposed;
static PyObject *__pyx_n_s_iphase_supercritical;
static PyObject *__pyx_n_s_iphase_supercritical_gas;
static PyObject *__pyx_n_s_iphase_supercritical_liquid;
static PyObject *__pyx_n_s_iphase_twophase;
static PyObject *__pyx_n_s_iphase_unknown;
static PyObject *__pyx_n_s_irhomass_critical;
static PyObject *__pyx_n_s_irhomass_reducing;
static PyObject *__pyx_n_s_irhomolar_critical;
static PyObject *__pyx_n_s_irhomolar_reducing;
static PyObject *__pyx_n_s_ispeed_sound;
static PyObject *__pyx_n_s_isurface_tension;
static PyObject *__pyx_n_s_iundefined_parameter;
static PyObject *__pyx_n_s_iviscosity;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_test;

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "_constants",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_DmassHmass_INPUTS, __pyx_k_DmassHmass_INPUTS, sizeof(__pyx_k_DmassHmass_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmassP_INPUTS, __pyx_k_DmassP_INPUTS, sizeof(__pyx_k_DmassP_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmassSmass_INPUTS, __pyx_k_DmassSmass_INPUTS, sizeof(__pyx_k_DmassSmass_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmassT_INPUTS, __pyx_k_DmassT_INPUTS, sizeof(__pyx_k_DmassT_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmassUmass_INPUTS, __pyx_k_DmassUmass_INPUTS, sizeof(__pyx_k_DmassUmass_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmolarHmolar_INPUTS, __pyx_k_DmolarHmolar_INPUTS, sizeof(__pyx_k_DmolarHmolar_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmolarP_INPUTS, __pyx_k_DmolarP_INPUTS, sizeof(__pyx_k_DmolarP_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmolarSmolar_INPUTS, __pyx_k_DmolarSmolar_INPUTS, sizeof(__pyx_k_DmolarSmolar_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmolarT_INPUTS, __pyx_k_DmolarT_INPUTS, sizeof(__pyx_k_DmolarT_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmolarUmolar_INPUTS, __pyx_k_DmolarUmolar_INPUTS, sizeof(__pyx_k_DmolarUmolar_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_FLUID_TYPE_INCOMPRESSIBLE_LIQUID, __pyx_k_FLUID_TYPE_INCOMPRESSIBLE_LIQUID, sizeof(__pyx_k_FLUID_TYPE_INCOMPRESSIBLE_LIQUID), 0, 0, 1, 1},
  {&__pyx_n_s_FLUID_TYPE_INCOMPRESSIBLE_SOLUTI, __pyx_k_FLUID_TYPE_INCOMPRESSIBLE_SOLUTI, sizeof(__pyx_k_FLUID_TYPE_INCOMPRESSIBLE_SOLUTI), 0, 0, 1, 1},
  {&__pyx_n_s_FLUID_TYPE_PSEUDOPURE, __pyx_k_FLUID_TYPE_PSEUDOPURE, sizeof(__pyx_k_FLUID_TYPE_PSEUDOPURE), 0, 0, 1, 1},
  {&__pyx_n_s_FLUID_TYPE_PURE, __pyx_k_FLUID_TYPE_PURE, sizeof(__pyx_k_FLUID_TYPE_PURE), 0, 0, 1, 1},
  {&__pyx_n_s_FLUID_TYPE_REFPROP, __pyx_k_FLUID_TYPE_REFPROP, sizeof(__pyx_k_FLUID_TYPE_REFPROP), 0, 0, 1, 1},
  {&__pyx_n_s_FLUID_TYPE_UNDEFINED, __pyx_k_FLUID_TYPE_UNDEFINED, sizeof(__pyx_k_FLUID_TYPE_UNDEFINED), 0, 0, 1, 1},
  {&__pyx_n_s_HmassP_INPUTS, __pyx_k_HmassP_INPUTS, sizeof(__pyx_k_HmassP_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_HmassQ_INPUTS, __pyx_k_HmassQ_INPUTS, sizeof(__pyx_k_HmassQ_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_HmassSmass_INPUTS, __pyx_k_HmassSmass_INPUTS, sizeof(__pyx_k_HmassSmass_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_HmassT_INPUTS, __pyx_k_HmassT_INPUTS, sizeof(__pyx_k_HmassT_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_HmolarP_INPUTS, __pyx_k_HmolarP_INPUTS, sizeof(__pyx_k_HmolarP_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_HmolarQ_INPUTS, __pyx_k_HmolarQ_INPUTS, sizeof(__pyx_k_HmolarQ_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_HmolarSmolar_INPUTS, __pyx_k_HmolarSmolar_INPUTS, sizeof(__pyx_k_HmolarSmolar_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_HmolarT_INPUTS, __pyx_k_HmolarT_INPUTS, sizeof(__pyx_k_HmolarT_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_PAIR_INVALID, __pyx_k_INPUT_PAIR_INVALID, sizeof(__pyx_k_INPUT_PAIR_INVALID), 0, 0, 1, 1},
  {&__pyx_n_s_INVALID_PARAMETER, __pyx_k_INVALID_PARAMETER, sizeof(__pyx_k_INVALID_PARAMETER), 0, 0, 1, 1},
  {&__pyx_n_s_PQ_INPUTS, __pyx_k_PQ_INPUTS, sizeof(__pyx_k_PQ_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_PSmass_INPUTS, __pyx_k_PSmass_INPUTS, sizeof(__pyx_k_PSmass_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_PSmolar_INPUTS, __pyx_k_PSmolar_INPUTS, sizeof(__pyx_k_PSmolar_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_PT_INPUTS, __pyx_k_PT_INPUTS, sizeof(__pyx_k_PT_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_PUmass_INPUTS, __pyx_k_PUmass_INPUTS, sizeof(__pyx_k_PUmass_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_PUmolar_INPUTS, __pyx_k_PUmolar_INPUTS, sizeof(__pyx_k_PUmolar_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_QSmass_INPUTS, __pyx_k_QSmass_INPUTS, sizeof(__pyx_k_QSmass_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_QSmolar_INPUTS, __pyx_k_QSmolar_INPUTS, sizeof(__pyx_k_QSmolar_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_QT_INPUTS, __pyx_k_QT_INPUTS, sizeof(__pyx_k_QT_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_SmassT_INPUTS, __pyx_k_SmassT_INPUTS, sizeof(__pyx_k_SmassT_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_SmassUmass_INPUTS, __pyx_k_SmassUmass_INPUTS, sizeof(__pyx_k_SmassUmass_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_SmolarT_INPUTS, __pyx_k_SmolarT_INPUTS, sizeof(__pyx_k_SmolarT_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_SmolarUmolar_INPUTS, __pyx_k_SmolarUmolar_INPUTS, sizeof(__pyx_k_SmolarUmolar_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_TUmass_INPUTS, __pyx_k_TUmass_INPUTS, sizeof(__pyx_k_TUmass_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_TUmolar_INPUTS, __pyx_k_TUmolar_INPUTS, sizeof(__pyx_k_TUmolar_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_iBvirial, __pyx_k_iBvirial, sizeof(__pyx_k_iBvirial), 0, 0, 1, 1},
  {&__pyx_n_s_iCp0mass, __pyx_k_iCp0mass, sizeof(__pyx_k_iCp0mass), 0, 0, 1, 1},
  {&__pyx_n_s_iCp0molar, __pyx_k_iCp0molar, sizeof(__pyx_k_iCp0molar), 0, 0, 1, 1},
  {&__pyx_n_s_iCpmass, __pyx_k_iCpmass, sizeof(__pyx_k_iCpmass), 0, 0, 1, 1},
  {&__pyx_n_s_iCpmolar, __pyx_k_iCpmolar, sizeof(__pyx_k_iCpmolar), 0, 0, 1, 1},
  {&__pyx_n_s_iCvirial, __pyx_k_iCvirial, sizeof(__pyx_k_iCvirial), 0, 0, 1, 1},
  {&__pyx_n_s_iCvmass, __pyx_k_iCvmass, sizeof(__pyx_k_iCvmass), 0, 0, 1, 1},
  {&__pyx_n_s_iCvmolar, __pyx_k_iCvmolar, sizeof(__pyx_k_iCvmolar), 0, 0, 1, 1},
  {&__pyx_n_s_iDelta, __pyx_k_iDelta, sizeof(__pyx_k_iDelta), 0, 0, 1, 1},
  {&__pyx_n_s_iDmass, __pyx_k_iDmass, sizeof(__pyx_k_iDmass), 0, 0, 1, 1},
  {&__pyx_n_s_iDmolar, __pyx_k_iDmolar, sizeof(__pyx_k_iDmolar), 0, 0, 1, 1},
  {&__pyx_n_s_iFH, __pyx_k_iFH, sizeof(__pyx_k_iFH), 0, 0, 1, 1},
  {&__pyx_n_s_iGWP100, __pyx_k_iGWP100, sizeof(__pyx_k_iGWP100), 0, 0, 1, 1},
  {&__pyx_n_s_iGWP20, __pyx_k_iGWP20, sizeof(__pyx_k_iGWP20), 0, 0, 1, 1},
  {&__pyx_n_s_iGWP500, __pyx_k_iGWP500, sizeof(__pyx_k_iGWP500), 0, 0, 1, 1},
  {&__pyx_n_s_iGmass, __pyx_k_iGmass, sizeof(__pyx_k_iGmass), 0, 0, 1, 1},
  {&__pyx_n_s_iGmolar, __pyx_k_iGmolar, sizeof(__pyx_k_iGmolar), 0, 0, 1, 1},
  {&__pyx_n_s_iHH, __pyx_k_iHH, sizeof(__pyx_k_iHH), 0, 0, 1, 1},
  {&__pyx_n_s_iHmass, __pyx_k_iHmass, sizeof(__pyx_k_iHmass), 0, 0, 1, 1},
  {&__pyx_n_s_iHmolar, __pyx_k_iHmolar, sizeof(__pyx_k_iHmolar), 0, 0, 1, 1},
  {&__pyx_n_s_iODP, __pyx_k_iODP, sizeof(__pyx_k_iODP), 0, 0, 1, 1},
  {&__pyx_n_s_iP, __pyx_k_iP, sizeof(__pyx_k_iP), 0, 0, 1, 1},
  {&__pyx_n_s_iPH, __pyx_k_iPH, sizeof(__pyx_k_iPH), 0, 0, 1, 1},
  {&__pyx_n_s_iPIP, __pyx_k_iPIP, sizeof(__pyx_k_iPIP), 0, 0, 1, 1},
  {&__pyx_n_s_iP_critical, __pyx_k_iP_critical, sizeof(__pyx_k_iP_critical), 0, 0, 1, 1},
  {&__pyx_n_s_iP_max, __pyx_k_iP_max, sizeof(__pyx_k_iP_max), 0, 0, 1, 1},
  {&__pyx_n_s_iP_min, __pyx_k_iP_min, sizeof(__pyx_k_iP_min), 0, 0, 1, 1},
  {&__pyx_n_s_iP_reducing, __pyx_k_iP_reducing, sizeof(__pyx_k_iP_reducing), 0, 0, 1, 1},
  {&__pyx_n_s_iP_triple, __pyx_k_iP_triple, sizeof(__pyx_k_iP_triple), 0, 0, 1, 1},
  {&__pyx_n_s_iPhase, __pyx_k_iPhase, sizeof(__pyx_k_iPhase), 0, 0, 1, 1},
  {&__pyx_n_s_iPrandtl, __pyx_k_iPrandtl, sizeof(__pyx_k_iPrandtl), 0, 0, 1, 1},
  {&__pyx_n_s_iQ, __pyx_k_iQ, sizeof(__pyx_k_iQ), 0, 0, 1, 1},
  {&__pyx_n_s_iSmass, __pyx_k_iSmass, sizeof(__pyx_k_iSmass), 0, 0, 1, 1},
  {&__pyx_n_s_iSmolar, __pyx_k_iSmolar, sizeof(__pyx_k_iSmolar), 0, 0, 1, 1},
  {&__pyx_n_s_iT, __pyx_k_iT, sizeof(__pyx_k_iT), 0, 0, 1, 1},
  {&__pyx_n_s_iT_critical, __pyx_k_iT_critical, sizeof(__pyx_k_iT_critical), 0, 0, 1, 1},
  {&__pyx_n_s_iT_freeze, __pyx_k_iT_freeze, sizeof(__pyx_k_iT_freeze), 0, 0, 1, 1},
  {&__pyx_n_s_iT_max, __pyx_k_iT_max, sizeof(__pyx_k_iT_max), 0, 0, 1, 1},
  {&__pyx_n_s_iT_min, __pyx_k_iT_min, sizeof(__pyx_k_iT_min), 0, 0, 1, 1},
  {&__pyx_n_s_iT_reducing, __pyx_k_iT_reducing, sizeof(__pyx_k_iT_reducing), 0, 0, 1, 1},
  {&__pyx_n_s_iT_triple, __pyx_k_iT_triple, sizeof(__pyx_k_iT_triple), 0, 0, 1, 1},
  {&__pyx_n_s_iTau, __pyx_k_iTau, sizeof(__pyx_k_iTau), 0, 0, 1, 1},
  {&__pyx_n_s_iUmass, __pyx_k_iUmass, sizeof(__pyx_k_iUmass), 0, 0, 1, 1},
  {&__pyx_n_s_iUmolar, __pyx_k_iUmolar, sizeof(__pyx_k_iUmolar), 0, 0, 1, 1},
  {&__pyx_n_s_iZ, __pyx_k_iZ, sizeof(__pyx_k_iZ), 0, 0, 1, 1},
  {&__pyx_n_s_iacentric_factor, __pyx_k_iacentric_factor, sizeof(__pyx_k_iacentric_factor), 0, 0, 1, 1},
  {&__pyx_n_s_ialpha0, __pyx_k_ialpha0, sizeof(__pyx_k_ialpha0), 0, 0, 1, 1},
  {&__pyx_n_s_ialphar, __pyx_k_ialphar, sizeof(__pyx_k_ialphar), 0, 0, 1, 1},
  {&__pyx_n_s_iconductivity, __pyx_k_iconductivity, sizeof(__pyx_k_iconductivity), 0, 0, 1, 1},
  {&__pyx_n_s_idBvirial_dT, __pyx_k_idBvirial_dT, sizeof(__pyx_k_idBvirial_dT), 0, 0, 1, 1},
  {&__pyx_n_s_idCvirial_dT, __pyx_k_idCvirial_dT, sizeof(__pyx_k_idCvirial_dT), 0, 0, 1, 1},
  {&__pyx_n_s_idalpha0_ddelta_consttau, __pyx_k_idalpha0_ddelta_consttau, sizeof(__pyx_k_idalpha0_ddelta_consttau), 0, 0, 1, 1},
  {&__pyx_n_s_idalpha0_dtau_constdelta, __pyx_k_idalpha0_dtau_constdelta, sizeof(__pyx_k_idalpha0_dtau_constdelta), 0, 0, 1, 1},
  {&__pyx_n_s_idalphar_ddelta_consttau, __pyx_k_idalphar_ddelta_consttau, sizeof(__pyx_k_idalphar_ddelta_consttau), 0, 0, 1, 1},
  {&__pyx_n_s_idalphar_dtau_constdelta, __pyx_k_idalphar_dtau_constdelta, sizeof(__pyx_k_idalphar_dtau_constdelta), 0, 0, 1, 1},
  {&__pyx_n_s_ifraction_max, __pyx_k_ifraction_max, sizeof(__pyx_k_ifraction_max), 0, 0, 1, 1},
  {&__pyx_n_s_ifraction_min, __pyx_k_ifraction_min, sizeof(__pyx_k_ifraction_min), 0, 0, 1, 1},
  {&__pyx_n_s_ifundamental_derivative_of_gas_d, __pyx_k_ifundamental_derivative_of_gas_d, sizeof(__pyx_k_ifundamental_derivative_of_gas_d), 0, 0, 1, 1},
  {&__pyx_n_s_igas_constant, __pyx_k_igas_constant, sizeof(__pyx_k_igas_constant), 0, 0, 1, 1},
  {&__pyx_n_s_iisobaric_expansion_coefficient, __pyx_k_iisobaric_expansion_coefficient, sizeof(__pyx_k_iisobaric_expansion_coefficient), 0, 0, 1, 1},
  {&__pyx_n_s_iisothermal_compressibility, __pyx_k_iisothermal_compressibility, sizeof(__pyx_k_iisothermal_compressibility), 0, 0, 1, 1},
  {&__pyx_n_s_imolar_mass, __pyx_k_imolar_mass, sizeof(__pyx_k_imolar_mass), 0, 0, 1, 1},
  {&__pyx_n_s_iphase_critical_point, __pyx_k_iphase_critical_point, sizeof(__pyx_k_iphase_critical_point), 0, 0, 1, 1},
  {&__pyx_n_s_iphase_gas, __pyx_k_iphase_gas, sizeof(__pyx_k_iphase_gas), 0, 0, 1, 1},
  {&__pyx_n_s_iphase_liquid, __pyx_k_iphase_liquid, sizeof(__pyx_k_iphase_liquid), 0, 0, 1, 1},
  {&__pyx_n_s_iphase_not_imposed, __pyx_k_iphase_not_imposed, sizeof(__pyx_k_iphase_not_imposed), 0, 0, 1, 1},
  {&__pyx_n_s_iphase_supercritical, __pyx_k_iphase_supercritical, sizeof(__pyx_k_iphase_supercritical), 0, 0, 1, 1},
  {&__pyx_n_s_iphase_supercritical_gas, __pyx_k_iphase_supercritical_gas, sizeof(__pyx_k_iphase_supercritical_gas), 0, 0, 1, 1},
  {&__pyx_n_s_iphase_supercritical_liquid, __pyx_k_iphase_supercritical_liquid, sizeof(__pyx_k_iphase_supercritical_liquid), 0, 0, 1, 1},
  {&__pyx_n_s_iphase_twophase, __pyx_k_iphase_twophase, sizeof(__pyx_k_iphase_twophase), 0, 0, 1, 1},
  {&__pyx_n_s_iphase_unknown, __pyx_k_iphase_unknown, sizeof(__pyx_k_iphase_unknown), 0, 0, 1, 1},
  {&__pyx_n_s_irhomass_critical, __pyx_k_irhomass_critical, sizeof(__pyx_k_irhomass_critical), 0, 0, 1, 1},
  {&__pyx_n_s_irhomass_reducing, __pyx_k_irhomass_reducing, sizeof(__pyx_k_irhomass_reducing), 0, 0, 1, 1},
  {&__pyx_n_s_irhomolar_critical, __pyx_k_irhomolar_critical, sizeof(__pyx_k_irhomolar_critical), 0, 0, 1, 1},
  {&__pyx_n_s_irhomolar_reducing, __pyx_k_irhomolar_reducing, sizeof(__pyx_k_irhomolar_reducing), 0, 0, 1, 1},
  {&__pyx_n_s_ispeed_sound, __pyx_k_ispeed_sound, sizeof(__pyx_k_ispeed_sound), 0, 0, 1, 1},
  {&__pyx_n_s_isurface_tension, __pyx_k_isurface_tension, sizeof(__pyx_k_isurface_tension), 0, 0, 1, 1},
  {&__pyx_n_s_iundefined_parameter, __pyx_k_iundefined_parameter, sizeof(__pyx_k_iundefined_parameter), 0, 0, 1, 1},
  {&__pyx_n_s_iviscosity, __pyx_k_iviscosity, sizeof(__pyx_k_iviscosity), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_constants(void); /*proto*/
PyMODINIT_FUNC init_constants(void)
#else
PyMODINIT_FUNC PyInit__constants(void); /*proto*/
PyMODINIT_FUNC PyInit__constants(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__constants(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_constants", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_CoolProp___constants) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "CoolProp._constants")) {
      if (unlikely(PyDict_SetItemString(modules, "CoolProp._constants", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "CoolProp\_constants.pyx":5
 * cimport constants_header
 * 
 * INVALID_PARAMETER = constants_header.INVALID_PARAMETER             # <<<<<<<<<<<<<<
 * igas_constant = constants_header.igas_constant
 * imolar_mass = constants_header.imolar_mass
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::INVALID_PARAMETER); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INVALID_PARAMETER, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":6
 * 
 * INVALID_PARAMETER = constants_header.INVALID_PARAMETER
 * igas_constant = constants_header.igas_constant             # <<<<<<<<<<<<<<
 * imolar_mass = constants_header.imolar_mass
 * iacentric_factor = constants_header.iacentric_factor
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::igas_constant); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_igas_constant, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":7
 * INVALID_PARAMETER = constants_header.INVALID_PARAMETER
 * igas_constant = constants_header.igas_constant
 * imolar_mass = constants_header.imolar_mass             # <<<<<<<<<<<<<<
 * iacentric_factor = constants_header.iacentric_factor
 * irhomolar_reducing = constants_header.irhomolar_reducing
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::imolar_mass); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_imolar_mass, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":8
 * igas_constant = constants_header.igas_constant
 * imolar_mass = constants_header.imolar_mass
 * iacentric_factor = constants_header.iacentric_factor             # <<<<<<<<<<<<<<
 * irhomolar_reducing = constants_header.irhomolar_reducing
 * irhomolar_critical = constants_header.irhomolar_critical
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iacentric_factor); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iacentric_factor, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":9
 * imolar_mass = constants_header.imolar_mass
 * iacentric_factor = constants_header.iacentric_factor
 * irhomolar_reducing = constants_header.irhomolar_reducing             # <<<<<<<<<<<<<<
 * irhomolar_critical = constants_header.irhomolar_critical
 * iT_reducing = constants_header.iT_reducing
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::irhomolar_reducing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_irhomolar_reducing, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":10
 * iacentric_factor = constants_header.iacentric_factor
 * irhomolar_reducing = constants_header.irhomolar_reducing
 * irhomolar_critical = constants_header.irhomolar_critical             # <<<<<<<<<<<<<<
 * iT_reducing = constants_header.iT_reducing
 * iT_critical = constants_header.iT_critical
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::irhomolar_critical); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_irhomolar_critical, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":11
 * irhomolar_reducing = constants_header.irhomolar_reducing
 * irhomolar_critical = constants_header.irhomolar_critical
 * iT_reducing = constants_header.iT_reducing             # <<<<<<<<<<<<<<
 * iT_critical = constants_header.iT_critical
 * irhomass_reducing = constants_header.irhomass_reducing
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iT_reducing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iT_reducing, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":12
 * irhomolar_critical = constants_header.irhomolar_critical
 * iT_reducing = constants_header.iT_reducing
 * iT_critical = constants_header.iT_critical             # <<<<<<<<<<<<<<
 * irhomass_reducing = constants_header.irhomass_reducing
 * irhomass_critical = constants_header.irhomass_critical
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iT_critical); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iT_critical, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":13
 * iT_reducing = constants_header.iT_reducing
 * iT_critical = constants_header.iT_critical
 * irhomass_reducing = constants_header.irhomass_reducing             # <<<<<<<<<<<<<<
 * irhomass_critical = constants_header.irhomass_critical
 * iP_critical = constants_header.iP_critical
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::irhomass_reducing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_irhomass_reducing, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":14
 * iT_critical = constants_header.iT_critical
 * irhomass_reducing = constants_header.irhomass_reducing
 * irhomass_critical = constants_header.irhomass_critical             # <<<<<<<<<<<<<<
 * iP_critical = constants_header.iP_critical
 * iP_reducing = constants_header.iP_reducing
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::irhomass_critical); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_irhomass_critical, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":15
 * irhomass_reducing = constants_header.irhomass_reducing
 * irhomass_critical = constants_header.irhomass_critical
 * iP_critical = constants_header.iP_critical             # <<<<<<<<<<<<<<
 * iP_reducing = constants_header.iP_reducing
 * iT_triple = constants_header.iT_triple
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iP_critical); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iP_critical, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":16
 * irhomass_critical = constants_header.irhomass_critical
 * iP_critical = constants_header.iP_critical
 * iP_reducing = constants_header.iP_reducing             # <<<<<<<<<<<<<<
 * iT_triple = constants_header.iT_triple
 * iP_triple = constants_header.iP_triple
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iP_reducing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iP_reducing, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":17
 * iP_critical = constants_header.iP_critical
 * iP_reducing = constants_header.iP_reducing
 * iT_triple = constants_header.iT_triple             # <<<<<<<<<<<<<<
 * iP_triple = constants_header.iP_triple
 * iT_min = constants_header.iT_min
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iT_triple); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iT_triple, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":18
 * iP_reducing = constants_header.iP_reducing
 * iT_triple = constants_header.iT_triple
 * iP_triple = constants_header.iP_triple             # <<<<<<<<<<<<<<
 * iT_min = constants_header.iT_min
 * iT_max = constants_header.iT_max
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iP_triple); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iP_triple, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":19
 * iT_triple = constants_header.iT_triple
 * iP_triple = constants_header.iP_triple
 * iT_min = constants_header.iT_min             # <<<<<<<<<<<<<<
 * iT_max = constants_header.iT_max
 * iP_max = constants_header.iP_max
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iT_min); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iT_min, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":20
 * iP_triple = constants_header.iP_triple
 * iT_min = constants_header.iT_min
 * iT_max = constants_header.iT_max             # <<<<<<<<<<<<<<
 * iP_max = constants_header.iP_max
 * iP_min = constants_header.iP_min
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iT_max); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iT_max, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":21
 * iT_min = constants_header.iT_min
 * iT_max = constants_header.iT_max
 * iP_max = constants_header.iP_max             # <<<<<<<<<<<<<<
 * iP_min = constants_header.iP_min
 * iT = constants_header.iT
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iP_max); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iP_max, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":22
 * iT_max = constants_header.iT_max
 * iP_max = constants_header.iP_max
 * iP_min = constants_header.iP_min             # <<<<<<<<<<<<<<
 * iT = constants_header.iT
 * iP = constants_header.iP
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iP_min); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iP_min, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":23
 * iP_max = constants_header.iP_max
 * iP_min = constants_header.iP_min
 * iT = constants_header.iT             # <<<<<<<<<<<<<<
 * iP = constants_header.iP
 * iQ = constants_header.iQ
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iT, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":24
 * iP_min = constants_header.iP_min
 * iT = constants_header.iT
 * iP = constants_header.iP             # <<<<<<<<<<<<<<
 * iQ = constants_header.iQ
 * iTau = constants_header.iTau
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iP); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iP, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":25
 * iT = constants_header.iT
 * iP = constants_header.iP
 * iQ = constants_header.iQ             # <<<<<<<<<<<<<<
 * iTau = constants_header.iTau
 * iDelta = constants_header.iDelta
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iQ, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":26
 * iP = constants_header.iP
 * iQ = constants_header.iQ
 * iTau = constants_header.iTau             # <<<<<<<<<<<<<<
 * iDelta = constants_header.iDelta
 * iDmolar = constants_header.iDmolar
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iTau); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iTau, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":27
 * iQ = constants_header.iQ
 * iTau = constants_header.iTau
 * iDelta = constants_header.iDelta             # <<<<<<<<<<<<<<
 * iDmolar = constants_header.iDmolar
 * iHmolar = constants_header.iHmolar
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iDelta); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iDelta, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":28
 * iTau = constants_header.iTau
 * iDelta = constants_header.iDelta
 * iDmolar = constants_header.iDmolar             # <<<<<<<<<<<<<<
 * iHmolar = constants_header.iHmolar
 * iSmolar = constants_header.iSmolar
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iDmolar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iDmolar, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":29
 * iDelta = constants_header.iDelta
 * iDmolar = constants_header.iDmolar
 * iHmolar = constants_header.iHmolar             # <<<<<<<<<<<<<<
 * iSmolar = constants_header.iSmolar
 * iCpmolar = constants_header.iCpmolar
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iHmolar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iHmolar, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":30
 * iDmolar = constants_header.iDmolar
 * iHmolar = constants_header.iHmolar
 * iSmolar = constants_header.iSmolar             # <<<<<<<<<<<<<<
 * iCpmolar = constants_header.iCpmolar
 * iCp0molar = constants_header.iCp0molar
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iSmolar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iSmolar, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":31
 * iHmolar = constants_header.iHmolar
 * iSmolar = constants_header.iSmolar
 * iCpmolar = constants_header.iCpmolar             # <<<<<<<<<<<<<<
 * iCp0molar = constants_header.iCp0molar
 * iCvmolar = constants_header.iCvmolar
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iCpmolar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iCpmolar, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":32
 * iSmolar = constants_header.iSmolar
 * iCpmolar = constants_header.iCpmolar
 * iCp0molar = constants_header.iCp0molar             # <<<<<<<<<<<<<<
 * iCvmolar = constants_header.iCvmolar
 * iUmolar = constants_header.iUmolar
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iCp0molar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iCp0molar, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":33
 * iCpmolar = constants_header.iCpmolar
 * iCp0molar = constants_header.iCp0molar
 * iCvmolar = constants_header.iCvmolar             # <<<<<<<<<<<<<<
 * iUmolar = constants_header.iUmolar
 * iGmolar = constants_header.iGmolar
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iCvmolar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iCvmolar, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":34
 * iCp0molar = constants_header.iCp0molar
 * iCvmolar = constants_header.iCvmolar
 * iUmolar = constants_header.iUmolar             # <<<<<<<<<<<<<<
 * iGmolar = constants_header.iGmolar
 * iDmass = constants_header.iDmass
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iUmolar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iUmolar, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":35
 * iCvmolar = constants_header.iCvmolar
 * iUmolar = constants_header.iUmolar
 * iGmolar = constants_header.iGmolar             # <<<<<<<<<<<<<<
 * iDmass = constants_header.iDmass
 * iHmass = constants_header.iHmass
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iGmolar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iGmolar, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":36
 * iUmolar = constants_header.iUmolar
 * iGmolar = constants_header.iGmolar
 * iDmass = constants_header.iDmass             # <<<<<<<<<<<<<<
 * iHmass = constants_header.iHmass
 * iSmass = constants_header.iSmass
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iDmass); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iDmass, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":37
 * iGmolar = constants_header.iGmolar
 * iDmass = constants_header.iDmass
 * iHmass = constants_header.iHmass             # <<<<<<<<<<<<<<
 * iSmass = constants_header.iSmass
 * iCpmass = constants_header.iCpmass
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iHmass); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iHmass, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":38
 * iDmass = constants_header.iDmass
 * iHmass = constants_header.iHmass
 * iSmass = constants_header.iSmass             # <<<<<<<<<<<<<<
 * iCpmass = constants_header.iCpmass
 * iCp0mass = constants_header.iCp0mass
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iSmass); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iSmass, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":39
 * iHmass = constants_header.iHmass
 * iSmass = constants_header.iSmass
 * iCpmass = constants_header.iCpmass             # <<<<<<<<<<<<<<
 * iCp0mass = constants_header.iCp0mass
 * iCvmass = constants_header.iCvmass
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iCpmass); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iCpmass, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":40
 * iSmass = constants_header.iSmass
 * iCpmass = constants_header.iCpmass
 * iCp0mass = constants_header.iCp0mass             # <<<<<<<<<<<<<<
 * iCvmass = constants_header.iCvmass
 * iUmass = constants_header.iUmass
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iCp0mass); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iCp0mass, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":41
 * iCpmass = constants_header.iCpmass
 * iCp0mass = constants_header.iCp0mass
 * iCvmass = constants_header.iCvmass             # <<<<<<<<<<<<<<
 * iUmass = constants_header.iUmass
 * iGmass = constants_header.iGmass
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iCvmass); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iCvmass, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":42
 * iCp0mass = constants_header.iCp0mass
 * iCvmass = constants_header.iCvmass
 * iUmass = constants_header.iUmass             # <<<<<<<<<<<<<<
 * iGmass = constants_header.iGmass
 * iviscosity = constants_header.iviscosity
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iUmass); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iUmass, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":43
 * iCvmass = constants_header.iCvmass
 * iUmass = constants_header.iUmass
 * iGmass = constants_header.iGmass             # <<<<<<<<<<<<<<
 * iviscosity = constants_header.iviscosity
 * iconductivity = constants_header.iconductivity
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iGmass); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iGmass, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":44
 * iUmass = constants_header.iUmass
 * iGmass = constants_header.iGmass
 * iviscosity = constants_header.iviscosity             # <<<<<<<<<<<<<<
 * iconductivity = constants_header.iconductivity
 * isurface_tension = constants_header.isurface_tension
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iviscosity); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iviscosity, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":45
 * iGmass = constants_header.iGmass
 * iviscosity = constants_header.iviscosity
 * iconductivity = constants_header.iconductivity             # <<<<<<<<<<<<<<
 * isurface_tension = constants_header.isurface_tension
 * iPrandtl = constants_header.iPrandtl
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iconductivity); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iconductivity, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":46
 * iviscosity = constants_header.iviscosity
 * iconductivity = constants_header.iconductivity
 * isurface_tension = constants_header.isurface_tension             # <<<<<<<<<<<<<<
 * iPrandtl = constants_header.iPrandtl
 * ispeed_sound = constants_header.ispeed_sound
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::isurface_tension); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_isurface_tension, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":47
 * iconductivity = constants_header.iconductivity
 * isurface_tension = constants_header.isurface_tension
 * iPrandtl = constants_header.iPrandtl             # <<<<<<<<<<<<<<
 * ispeed_sound = constants_header.ispeed_sound
 * iisothermal_compressibility = constants_header.iisothermal_compressibility
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iPrandtl); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iPrandtl, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":48
 * isurface_tension = constants_header.isurface_tension
 * iPrandtl = constants_header.iPrandtl
 * ispeed_sound = constants_header.ispeed_sound             # <<<<<<<<<<<<<<
 * iisothermal_compressibility = constants_header.iisothermal_compressibility
 * iisobaric_expansion_coefficient = constants_header.iisobaric_expansion_coefficient
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::ispeed_sound); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ispeed_sound, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":49
 * iPrandtl = constants_header.iPrandtl
 * ispeed_sound = constants_header.ispeed_sound
 * iisothermal_compressibility = constants_header.iisothermal_compressibility             # <<<<<<<<<<<<<<
 * iisobaric_expansion_coefficient = constants_header.iisobaric_expansion_coefficient
 * ifundamental_derivative_of_gas_dynamics = constants_header.ifundamental_derivative_of_gas_dynamics
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iisothermal_compressibility); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iisothermal_compressibility, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":50
 * ispeed_sound = constants_header.ispeed_sound
 * iisothermal_compressibility = constants_header.iisothermal_compressibility
 * iisobaric_expansion_coefficient = constants_header.iisobaric_expansion_coefficient             # <<<<<<<<<<<<<<
 * ifundamental_derivative_of_gas_dynamics = constants_header.ifundamental_derivative_of_gas_dynamics
 * ialphar = constants_header.ialphar
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iisobaric_expansion_coefficient); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iisobaric_expansion_coefficient, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":51
 * iisothermal_compressibility = constants_header.iisothermal_compressibility
 * iisobaric_expansion_coefficient = constants_header.iisobaric_expansion_coefficient
 * ifundamental_derivative_of_gas_dynamics = constants_header.ifundamental_derivative_of_gas_dynamics             # <<<<<<<<<<<<<<
 * ialphar = constants_header.ialphar
 * idalphar_dtau_constdelta = constants_header.idalphar_dtau_constdelta
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::ifundamental_derivative_of_gas_dynamics); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ifundamental_derivative_of_gas_d, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":52
 * iisobaric_expansion_coefficient = constants_header.iisobaric_expansion_coefficient
 * ifundamental_derivative_of_gas_dynamics = constants_header.ifundamental_derivative_of_gas_dynamics
 * ialphar = constants_header.ialphar             # <<<<<<<<<<<<<<
 * idalphar_dtau_constdelta = constants_header.idalphar_dtau_constdelta
 * idalphar_ddelta_consttau = constants_header.idalphar_ddelta_consttau
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::ialphar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ialphar, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":53
 * ifundamental_derivative_of_gas_dynamics = constants_header.ifundamental_derivative_of_gas_dynamics
 * ialphar = constants_header.ialphar
 * idalphar_dtau_constdelta = constants_header.idalphar_dtau_constdelta             # <<<<<<<<<<<<<<
 * idalphar_ddelta_consttau = constants_header.idalphar_ddelta_consttau
 * ialpha0 = constants_header.ialpha0
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::idalphar_dtau_constdelta); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_idalphar_dtau_constdelta, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":54
 * ialphar = constants_header.ialphar
 * idalphar_dtau_constdelta = constants_header.idalphar_dtau_constdelta
 * idalphar_ddelta_consttau = constants_header.idalphar_ddelta_consttau             # <<<<<<<<<<<<<<
 * ialpha0 = constants_header.ialpha0
 * idalpha0_dtau_constdelta = constants_header.idalpha0_dtau_constdelta
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::idalphar_ddelta_consttau); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_idalphar_ddelta_consttau, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":55
 * idalphar_dtau_constdelta = constants_header.idalphar_dtau_constdelta
 * idalphar_ddelta_consttau = constants_header.idalphar_ddelta_consttau
 * ialpha0 = constants_header.ialpha0             # <<<<<<<<<<<<<<
 * idalpha0_dtau_constdelta = constants_header.idalpha0_dtau_constdelta
 * idalpha0_ddelta_consttau = constants_header.idalpha0_ddelta_consttau
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::ialpha0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ialpha0, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":56
 * idalphar_ddelta_consttau = constants_header.idalphar_ddelta_consttau
 * ialpha0 = constants_header.ialpha0
 * idalpha0_dtau_constdelta = constants_header.idalpha0_dtau_constdelta             # <<<<<<<<<<<<<<
 * idalpha0_ddelta_consttau = constants_header.idalpha0_ddelta_consttau
 * iBvirial = constants_header.iBvirial
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::idalpha0_dtau_constdelta); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_idalpha0_dtau_constdelta, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":57
 * ialpha0 = constants_header.ialpha0
 * idalpha0_dtau_constdelta = constants_header.idalpha0_dtau_constdelta
 * idalpha0_ddelta_consttau = constants_header.idalpha0_ddelta_consttau             # <<<<<<<<<<<<<<
 * iBvirial = constants_header.iBvirial
 * iCvirial = constants_header.iCvirial
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::idalpha0_ddelta_consttau); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_idalpha0_ddelta_consttau, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":58
 * idalpha0_dtau_constdelta = constants_header.idalpha0_dtau_constdelta
 * idalpha0_ddelta_consttau = constants_header.idalpha0_ddelta_consttau
 * iBvirial = constants_header.iBvirial             # <<<<<<<<<<<<<<
 * iCvirial = constants_header.iCvirial
 * idBvirial_dT = constants_header.idBvirial_dT
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iBvirial); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iBvirial, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":59
 * idalpha0_ddelta_consttau = constants_header.idalpha0_ddelta_consttau
 * iBvirial = constants_header.iBvirial
 * iCvirial = constants_header.iCvirial             # <<<<<<<<<<<<<<
 * idBvirial_dT = constants_header.idBvirial_dT
 * idCvirial_dT = constants_header.idCvirial_dT
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iCvirial); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iCvirial, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":60
 * iBvirial = constants_header.iBvirial
 * iCvirial = constants_header.iCvirial
 * idBvirial_dT = constants_header.idBvirial_dT             # <<<<<<<<<<<<<<
 * idCvirial_dT = constants_header.idCvirial_dT
 * iZ = constants_header.iZ
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::idBvirial_dT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_idBvirial_dT, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":61
 * iCvirial = constants_header.iCvirial
 * idBvirial_dT = constants_header.idBvirial_dT
 * idCvirial_dT = constants_header.idCvirial_dT             # <<<<<<<<<<<<<<
 * iZ = constants_header.iZ
 * iPIP = constants_header.iPIP
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::idCvirial_dT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_idCvirial_dT, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":62
 * idBvirial_dT = constants_header.idBvirial_dT
 * idCvirial_dT = constants_header.idCvirial_dT
 * iZ = constants_header.iZ             # <<<<<<<<<<<<<<
 * iPIP = constants_header.iPIP
 * ifraction_min = constants_header.ifraction_min
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iZ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iZ, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":63
 * idCvirial_dT = constants_header.idCvirial_dT
 * iZ = constants_header.iZ
 * iPIP = constants_header.iPIP             # <<<<<<<<<<<<<<
 * ifraction_min = constants_header.ifraction_min
 * ifraction_max = constants_header.ifraction_max
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iPIP); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iPIP, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":64
 * iZ = constants_header.iZ
 * iPIP = constants_header.iPIP
 * ifraction_min = constants_header.ifraction_min             # <<<<<<<<<<<<<<
 * ifraction_max = constants_header.ifraction_max
 * iT_freeze = constants_header.iT_freeze
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::ifraction_min); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ifraction_min, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":65
 * iPIP = constants_header.iPIP
 * ifraction_min = constants_header.ifraction_min
 * ifraction_max = constants_header.ifraction_max             # <<<<<<<<<<<<<<
 * iT_freeze = constants_header.iT_freeze
 * iGWP20 = constants_header.iGWP20
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::ifraction_max); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ifraction_max, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":66
 * ifraction_min = constants_header.ifraction_min
 * ifraction_max = constants_header.ifraction_max
 * iT_freeze = constants_header.iT_freeze             # <<<<<<<<<<<<<<
 * iGWP20 = constants_header.iGWP20
 * iGWP100 = constants_header.iGWP100
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iT_freeze); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iT_freeze, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":67
 * ifraction_max = constants_header.ifraction_max
 * iT_freeze = constants_header.iT_freeze
 * iGWP20 = constants_header.iGWP20             # <<<<<<<<<<<<<<
 * iGWP100 = constants_header.iGWP100
 * iGWP500 = constants_header.iGWP500
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iGWP20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iGWP20, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":68
 * iT_freeze = constants_header.iT_freeze
 * iGWP20 = constants_header.iGWP20
 * iGWP100 = constants_header.iGWP100             # <<<<<<<<<<<<<<
 * iGWP500 = constants_header.iGWP500
 * iFH = constants_header.iFH
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iGWP100); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iGWP100, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":69
 * iGWP20 = constants_header.iGWP20
 * iGWP100 = constants_header.iGWP100
 * iGWP500 = constants_header.iGWP500             # <<<<<<<<<<<<<<
 * iFH = constants_header.iFH
 * iHH = constants_header.iHH
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iGWP500); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iGWP500, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":70
 * iGWP100 = constants_header.iGWP100
 * iGWP500 = constants_header.iGWP500
 * iFH = constants_header.iFH             # <<<<<<<<<<<<<<
 * iHH = constants_header.iHH
 * iPH = constants_header.iPH
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iFH); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iFH, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":71
 * iGWP500 = constants_header.iGWP500
 * iFH = constants_header.iFH
 * iHH = constants_header.iHH             # <<<<<<<<<<<<<<
 * iPH = constants_header.iPH
 * iODP = constants_header.iODP
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iHH); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iHH, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":72
 * iFH = constants_header.iFH
 * iHH = constants_header.iHH
 * iPH = constants_header.iPH             # <<<<<<<<<<<<<<
 * iODP = constants_header.iODP
 * iPhase = constants_header.iPhase
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iPH); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iPH, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":73
 * iHH = constants_header.iHH
 * iPH = constants_header.iPH
 * iODP = constants_header.iODP             # <<<<<<<<<<<<<<
 * iPhase = constants_header.iPhase
 * iundefined_parameter = constants_header.iundefined_parameter
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iODP); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iODP, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":74
 * iPH = constants_header.iPH
 * iODP = constants_header.iODP
 * iPhase = constants_header.iPhase             # <<<<<<<<<<<<<<
 * iundefined_parameter = constants_header.iundefined_parameter
 * INPUT_PAIR_INVALID = constants_header.INPUT_PAIR_INVALID
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iPhase); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iPhase, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":75
 * iODP = constants_header.iODP
 * iPhase = constants_header.iPhase
 * iundefined_parameter = constants_header.iundefined_parameter             # <<<<<<<<<<<<<<
 * INPUT_PAIR_INVALID = constants_header.INPUT_PAIR_INVALID
 * QT_INPUTS = constants_header.QT_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iundefined_parameter); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iundefined_parameter, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":76
 * iPhase = constants_header.iPhase
 * iundefined_parameter = constants_header.iundefined_parameter
 * INPUT_PAIR_INVALID = constants_header.INPUT_PAIR_INVALID             # <<<<<<<<<<<<<<
 * QT_INPUTS = constants_header.QT_INPUTS
 * PQ_INPUTS = constants_header.PQ_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::INPUT_PAIR_INVALID); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_PAIR_INVALID, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":77
 * iundefined_parameter = constants_header.iundefined_parameter
 * INPUT_PAIR_INVALID = constants_header.INPUT_PAIR_INVALID
 * QT_INPUTS = constants_header.QT_INPUTS             # <<<<<<<<<<<<<<
 * PQ_INPUTS = constants_header.PQ_INPUTS
 * QSmolar_INPUTS = constants_header.QSmolar_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::QT_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_QT_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":78
 * INPUT_PAIR_INVALID = constants_header.INPUT_PAIR_INVALID
 * QT_INPUTS = constants_header.QT_INPUTS
 * PQ_INPUTS = constants_header.PQ_INPUTS             # <<<<<<<<<<<<<<
 * QSmolar_INPUTS = constants_header.QSmolar_INPUTS
 * QSmass_INPUTS = constants_header.QSmass_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::PQ_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PQ_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":79
 * QT_INPUTS = constants_header.QT_INPUTS
 * PQ_INPUTS = constants_header.PQ_INPUTS
 * QSmolar_INPUTS = constants_header.QSmolar_INPUTS             # <<<<<<<<<<<<<<
 * QSmass_INPUTS = constants_header.QSmass_INPUTS
 * HmolarQ_INPUTS = constants_header.HmolarQ_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::QSmolar_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_QSmolar_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":80
 * PQ_INPUTS = constants_header.PQ_INPUTS
 * QSmolar_INPUTS = constants_header.QSmolar_INPUTS
 * QSmass_INPUTS = constants_header.QSmass_INPUTS             # <<<<<<<<<<<<<<
 * HmolarQ_INPUTS = constants_header.HmolarQ_INPUTS
 * HmassQ_INPUTS = constants_header.HmassQ_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::QSmass_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_QSmass_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":81
 * QSmolar_INPUTS = constants_header.QSmolar_INPUTS
 * QSmass_INPUTS = constants_header.QSmass_INPUTS
 * HmolarQ_INPUTS = constants_header.HmolarQ_INPUTS             # <<<<<<<<<<<<<<
 * HmassQ_INPUTS = constants_header.HmassQ_INPUTS
 * PT_INPUTS = constants_header.PT_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::HmolarQ_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HmolarQ_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":82
 * QSmass_INPUTS = constants_header.QSmass_INPUTS
 * HmolarQ_INPUTS = constants_header.HmolarQ_INPUTS
 * HmassQ_INPUTS = constants_header.HmassQ_INPUTS             # <<<<<<<<<<<<<<
 * PT_INPUTS = constants_header.PT_INPUTS
 * DmassT_INPUTS = constants_header.DmassT_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::HmassQ_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HmassQ_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":83
 * HmolarQ_INPUTS = constants_header.HmolarQ_INPUTS
 * HmassQ_INPUTS = constants_header.HmassQ_INPUTS
 * PT_INPUTS = constants_header.PT_INPUTS             # <<<<<<<<<<<<<<
 * DmassT_INPUTS = constants_header.DmassT_INPUTS
 * DmolarT_INPUTS = constants_header.DmolarT_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::PT_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PT_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":84
 * HmassQ_INPUTS = constants_header.HmassQ_INPUTS
 * PT_INPUTS = constants_header.PT_INPUTS
 * DmassT_INPUTS = constants_header.DmassT_INPUTS             # <<<<<<<<<<<<<<
 * DmolarT_INPUTS = constants_header.DmolarT_INPUTS
 * HmolarT_INPUTS = constants_header.HmolarT_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::DmassT_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmassT_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":85
 * PT_INPUTS = constants_header.PT_INPUTS
 * DmassT_INPUTS = constants_header.DmassT_INPUTS
 * DmolarT_INPUTS = constants_header.DmolarT_INPUTS             # <<<<<<<<<<<<<<
 * HmolarT_INPUTS = constants_header.HmolarT_INPUTS
 * HmassT_INPUTS = constants_header.HmassT_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::DmolarT_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmolarT_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":86
 * DmassT_INPUTS = constants_header.DmassT_INPUTS
 * DmolarT_INPUTS = constants_header.DmolarT_INPUTS
 * HmolarT_INPUTS = constants_header.HmolarT_INPUTS             # <<<<<<<<<<<<<<
 * HmassT_INPUTS = constants_header.HmassT_INPUTS
 * SmolarT_INPUTS = constants_header.SmolarT_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::HmolarT_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HmolarT_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":87
 * DmolarT_INPUTS = constants_header.DmolarT_INPUTS
 * HmolarT_INPUTS = constants_header.HmolarT_INPUTS
 * HmassT_INPUTS = constants_header.HmassT_INPUTS             # <<<<<<<<<<<<<<
 * SmolarT_INPUTS = constants_header.SmolarT_INPUTS
 * SmassT_INPUTS = constants_header.SmassT_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::HmassT_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HmassT_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":88
 * HmolarT_INPUTS = constants_header.HmolarT_INPUTS
 * HmassT_INPUTS = constants_header.HmassT_INPUTS
 * SmolarT_INPUTS = constants_header.SmolarT_INPUTS             # <<<<<<<<<<<<<<
 * SmassT_INPUTS = constants_header.SmassT_INPUTS
 * TUmolar_INPUTS = constants_header.TUmolar_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::SmolarT_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SmolarT_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":89
 * HmassT_INPUTS = constants_header.HmassT_INPUTS
 * SmolarT_INPUTS = constants_header.SmolarT_INPUTS
 * SmassT_INPUTS = constants_header.SmassT_INPUTS             # <<<<<<<<<<<<<<
 * TUmolar_INPUTS = constants_header.TUmolar_INPUTS
 * TUmass_INPUTS = constants_header.TUmass_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::SmassT_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SmassT_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":90
 * SmolarT_INPUTS = constants_header.SmolarT_INPUTS
 * SmassT_INPUTS = constants_header.SmassT_INPUTS
 * TUmolar_INPUTS = constants_header.TUmolar_INPUTS             # <<<<<<<<<<<<<<
 * TUmass_INPUTS = constants_header.TUmass_INPUTS
 * DmassP_INPUTS = constants_header.DmassP_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::TUmolar_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TUmolar_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":91
 * SmassT_INPUTS = constants_header.SmassT_INPUTS
 * TUmolar_INPUTS = constants_header.TUmolar_INPUTS
 * TUmass_INPUTS = constants_header.TUmass_INPUTS             # <<<<<<<<<<<<<<
 * DmassP_INPUTS = constants_header.DmassP_INPUTS
 * DmolarP_INPUTS = constants_header.DmolarP_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::TUmass_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TUmass_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":92
 * TUmolar_INPUTS = constants_header.TUmolar_INPUTS
 * TUmass_INPUTS = constants_header.TUmass_INPUTS
 * DmassP_INPUTS = constants_header.DmassP_INPUTS             # <<<<<<<<<<<<<<
 * DmolarP_INPUTS = constants_header.DmolarP_INPUTS
 * HmassP_INPUTS = constants_header.HmassP_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::DmassP_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmassP_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":93
 * TUmass_INPUTS = constants_header.TUmass_INPUTS
 * DmassP_INPUTS = constants_header.DmassP_INPUTS
 * DmolarP_INPUTS = constants_header.DmolarP_INPUTS             # <<<<<<<<<<<<<<
 * HmassP_INPUTS = constants_header.HmassP_INPUTS
 * HmolarP_INPUTS = constants_header.HmolarP_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::DmolarP_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmolarP_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":94
 * DmassP_INPUTS = constants_header.DmassP_INPUTS
 * DmolarP_INPUTS = constants_header.DmolarP_INPUTS
 * HmassP_INPUTS = constants_header.HmassP_INPUTS             # <<<<<<<<<<<<<<
 * HmolarP_INPUTS = constants_header.HmolarP_INPUTS
 * PSmass_INPUTS = constants_header.PSmass_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::HmassP_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HmassP_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":95
 * DmolarP_INPUTS = constants_header.DmolarP_INPUTS
 * HmassP_INPUTS = constants_header.HmassP_INPUTS
 * HmolarP_INPUTS = constants_header.HmolarP_INPUTS             # <<<<<<<<<<<<<<
 * PSmass_INPUTS = constants_header.PSmass_INPUTS
 * PSmolar_INPUTS = constants_header.PSmolar_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::HmolarP_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HmolarP_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":96
 * HmassP_INPUTS = constants_header.HmassP_INPUTS
 * HmolarP_INPUTS = constants_header.HmolarP_INPUTS
 * PSmass_INPUTS = constants_header.PSmass_INPUTS             # <<<<<<<<<<<<<<
 * PSmolar_INPUTS = constants_header.PSmolar_INPUTS
 * PUmass_INPUTS = constants_header.PUmass_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::PSmass_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PSmass_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":97
 * HmolarP_INPUTS = constants_header.HmolarP_INPUTS
 * PSmass_INPUTS = constants_header.PSmass_INPUTS
 * PSmolar_INPUTS = constants_header.PSmolar_INPUTS             # <<<<<<<<<<<<<<
 * PUmass_INPUTS = constants_header.PUmass_INPUTS
 * PUmolar_INPUTS = constants_header.PUmolar_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::PSmolar_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PSmolar_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":98
 * PSmass_INPUTS = constants_header.PSmass_INPUTS
 * PSmolar_INPUTS = constants_header.PSmolar_INPUTS
 * PUmass_INPUTS = constants_header.PUmass_INPUTS             # <<<<<<<<<<<<<<
 * PUmolar_INPUTS = constants_header.PUmolar_INPUTS
 * HmassSmass_INPUTS = constants_header.HmassSmass_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::PUmass_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PUmass_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":99
 * PSmolar_INPUTS = constants_header.PSmolar_INPUTS
 * PUmass_INPUTS = constants_header.PUmass_INPUTS
 * PUmolar_INPUTS = constants_header.PUmolar_INPUTS             # <<<<<<<<<<<<<<
 * HmassSmass_INPUTS = constants_header.HmassSmass_INPUTS
 * HmolarSmolar_INPUTS = constants_header.HmolarSmolar_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::PUmolar_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PUmolar_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":100
 * PUmass_INPUTS = constants_header.PUmass_INPUTS
 * PUmolar_INPUTS = constants_header.PUmolar_INPUTS
 * HmassSmass_INPUTS = constants_header.HmassSmass_INPUTS             # <<<<<<<<<<<<<<
 * HmolarSmolar_INPUTS = constants_header.HmolarSmolar_INPUTS
 * SmassUmass_INPUTS = constants_header.SmassUmass_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::HmassSmass_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HmassSmass_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":101
 * PUmolar_INPUTS = constants_header.PUmolar_INPUTS
 * HmassSmass_INPUTS = constants_header.HmassSmass_INPUTS
 * HmolarSmolar_INPUTS = constants_header.HmolarSmolar_INPUTS             # <<<<<<<<<<<<<<
 * SmassUmass_INPUTS = constants_header.SmassUmass_INPUTS
 * SmolarUmolar_INPUTS = constants_header.SmolarUmolar_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::HmolarSmolar_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HmolarSmolar_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":102
 * HmassSmass_INPUTS = constants_header.HmassSmass_INPUTS
 * HmolarSmolar_INPUTS = constants_header.HmolarSmolar_INPUTS
 * SmassUmass_INPUTS = constants_header.SmassUmass_INPUTS             # <<<<<<<<<<<<<<
 * SmolarUmolar_INPUTS = constants_header.SmolarUmolar_INPUTS
 * DmassHmass_INPUTS = constants_header.DmassHmass_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::SmassUmass_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SmassUmass_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":103
 * HmolarSmolar_INPUTS = constants_header.HmolarSmolar_INPUTS
 * SmassUmass_INPUTS = constants_header.SmassUmass_INPUTS
 * SmolarUmolar_INPUTS = constants_header.SmolarUmolar_INPUTS             # <<<<<<<<<<<<<<
 * DmassHmass_INPUTS = constants_header.DmassHmass_INPUTS
 * DmolarHmolar_INPUTS = constants_header.DmolarHmolar_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::SmolarUmolar_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SmolarUmolar_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":104
 * SmassUmass_INPUTS = constants_header.SmassUmass_INPUTS
 * SmolarUmolar_INPUTS = constants_header.SmolarUmolar_INPUTS
 * DmassHmass_INPUTS = constants_header.DmassHmass_INPUTS             # <<<<<<<<<<<<<<
 * DmolarHmolar_INPUTS = constants_header.DmolarHmolar_INPUTS
 * DmassSmass_INPUTS = constants_header.DmassSmass_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::DmassHmass_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmassHmass_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":105
 * SmolarUmolar_INPUTS = constants_header.SmolarUmolar_INPUTS
 * DmassHmass_INPUTS = constants_header.DmassHmass_INPUTS
 * DmolarHmolar_INPUTS = constants_header.DmolarHmolar_INPUTS             # <<<<<<<<<<<<<<
 * DmassSmass_INPUTS = constants_header.DmassSmass_INPUTS
 * DmolarSmolar_INPUTS = constants_header.DmolarSmolar_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::DmolarHmolar_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmolarHmolar_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":106
 * DmassHmass_INPUTS = constants_header.DmassHmass_INPUTS
 * DmolarHmolar_INPUTS = constants_header.DmolarHmolar_INPUTS
 * DmassSmass_INPUTS = constants_header.DmassSmass_INPUTS             # <<<<<<<<<<<<<<
 * DmolarSmolar_INPUTS = constants_header.DmolarSmolar_INPUTS
 * DmassUmass_INPUTS = constants_header.DmassUmass_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::DmassSmass_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmassSmass_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":107
 * DmolarHmolar_INPUTS = constants_header.DmolarHmolar_INPUTS
 * DmassSmass_INPUTS = constants_header.DmassSmass_INPUTS
 * DmolarSmolar_INPUTS = constants_header.DmolarSmolar_INPUTS             # <<<<<<<<<<<<<<
 * DmassUmass_INPUTS = constants_header.DmassUmass_INPUTS
 * DmolarUmolar_INPUTS = constants_header.DmolarUmolar_INPUTS
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::DmolarSmolar_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmolarSmolar_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":108
 * DmassSmass_INPUTS = constants_header.DmassSmass_INPUTS
 * DmolarSmolar_INPUTS = constants_header.DmolarSmolar_INPUTS
 * DmassUmass_INPUTS = constants_header.DmassUmass_INPUTS             # <<<<<<<<<<<<<<
 * DmolarUmolar_INPUTS = constants_header.DmolarUmolar_INPUTS
 * FLUID_TYPE_PURE = constants_header.FLUID_TYPE_PURE
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::DmassUmass_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmassUmass_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":109
 * DmolarSmolar_INPUTS = constants_header.DmolarSmolar_INPUTS
 * DmassUmass_INPUTS = constants_header.DmassUmass_INPUTS
 * DmolarUmolar_INPUTS = constants_header.DmolarUmolar_INPUTS             # <<<<<<<<<<<<<<
 * FLUID_TYPE_PURE = constants_header.FLUID_TYPE_PURE
 * FLUID_TYPE_PSEUDOPURE = constants_header.FLUID_TYPE_PSEUDOPURE
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::DmolarUmolar_INPUTS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmolarUmolar_INPUTS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":110
 * DmassUmass_INPUTS = constants_header.DmassUmass_INPUTS
 * DmolarUmolar_INPUTS = constants_header.DmolarUmolar_INPUTS
 * FLUID_TYPE_PURE = constants_header.FLUID_TYPE_PURE             # <<<<<<<<<<<<<<
 * FLUID_TYPE_PSEUDOPURE = constants_header.FLUID_TYPE_PSEUDOPURE
 * FLUID_TYPE_REFPROP = constants_header.FLUID_TYPE_REFPROP
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::FLUID_TYPE_PURE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FLUID_TYPE_PURE, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":111
 * DmolarUmolar_INPUTS = constants_header.DmolarUmolar_INPUTS
 * FLUID_TYPE_PURE = constants_header.FLUID_TYPE_PURE
 * FLUID_TYPE_PSEUDOPURE = constants_header.FLUID_TYPE_PSEUDOPURE             # <<<<<<<<<<<<<<
 * FLUID_TYPE_REFPROP = constants_header.FLUID_TYPE_REFPROP
 * FLUID_TYPE_INCOMPRESSIBLE_LIQUID = constants_header.FLUID_TYPE_INCOMPRESSIBLE_LIQUID
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::FLUID_TYPE_PSEUDOPURE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FLUID_TYPE_PSEUDOPURE, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":112
 * FLUID_TYPE_PURE = constants_header.FLUID_TYPE_PURE
 * FLUID_TYPE_PSEUDOPURE = constants_header.FLUID_TYPE_PSEUDOPURE
 * FLUID_TYPE_REFPROP = constants_header.FLUID_TYPE_REFPROP             # <<<<<<<<<<<<<<
 * FLUID_TYPE_INCOMPRESSIBLE_LIQUID = constants_header.FLUID_TYPE_INCOMPRESSIBLE_LIQUID
 * FLUID_TYPE_INCOMPRESSIBLE_SOLUTION = constants_header.FLUID_TYPE_INCOMPRESSIBLE_SOLUTION
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::FLUID_TYPE_REFPROP); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FLUID_TYPE_REFPROP, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":113
 * FLUID_TYPE_PSEUDOPURE = constants_header.FLUID_TYPE_PSEUDOPURE
 * FLUID_TYPE_REFPROP = constants_header.FLUID_TYPE_REFPROP
 * FLUID_TYPE_INCOMPRESSIBLE_LIQUID = constants_header.FLUID_TYPE_INCOMPRESSIBLE_LIQUID             # <<<<<<<<<<<<<<
 * FLUID_TYPE_INCOMPRESSIBLE_SOLUTION = constants_header.FLUID_TYPE_INCOMPRESSIBLE_SOLUTION
 * FLUID_TYPE_UNDEFINED = constants_header.FLUID_TYPE_UNDEFINED
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::FLUID_TYPE_INCOMPRESSIBLE_LIQUID); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FLUID_TYPE_INCOMPRESSIBLE_LIQUID, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":114
 * FLUID_TYPE_REFPROP = constants_header.FLUID_TYPE_REFPROP
 * FLUID_TYPE_INCOMPRESSIBLE_LIQUID = constants_header.FLUID_TYPE_INCOMPRESSIBLE_LIQUID
 * FLUID_TYPE_INCOMPRESSIBLE_SOLUTION = constants_header.FLUID_TYPE_INCOMPRESSIBLE_SOLUTION             # <<<<<<<<<<<<<<
 * FLUID_TYPE_UNDEFINED = constants_header.FLUID_TYPE_UNDEFINED
 * iphase_liquid = constants_header.iphase_liquid
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::FLUID_TYPE_INCOMPRESSIBLE_SOLUTION); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FLUID_TYPE_INCOMPRESSIBLE_SOLUTI, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":115
 * FLUID_TYPE_INCOMPRESSIBLE_LIQUID = constants_header.FLUID_TYPE_INCOMPRESSIBLE_LIQUID
 * FLUID_TYPE_INCOMPRESSIBLE_SOLUTION = constants_header.FLUID_TYPE_INCOMPRESSIBLE_SOLUTION
 * FLUID_TYPE_UNDEFINED = constants_header.FLUID_TYPE_UNDEFINED             # <<<<<<<<<<<<<<
 * iphase_liquid = constants_header.iphase_liquid
 * iphase_supercritical = constants_header.iphase_supercritical
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::FLUID_TYPE_UNDEFINED); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FLUID_TYPE_UNDEFINED, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":116
 * FLUID_TYPE_INCOMPRESSIBLE_SOLUTION = constants_header.FLUID_TYPE_INCOMPRESSIBLE_SOLUTION
 * FLUID_TYPE_UNDEFINED = constants_header.FLUID_TYPE_UNDEFINED
 * iphase_liquid = constants_header.iphase_liquid             # <<<<<<<<<<<<<<
 * iphase_supercritical = constants_header.iphase_supercritical
 * iphase_supercritical_gas = constants_header.iphase_supercritical_gas
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iphase_liquid); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iphase_liquid, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":117
 * FLUID_TYPE_UNDEFINED = constants_header.FLUID_TYPE_UNDEFINED
 * iphase_liquid = constants_header.iphase_liquid
 * iphase_supercritical = constants_header.iphase_supercritical             # <<<<<<<<<<<<<<
 * iphase_supercritical_gas = constants_header.iphase_supercritical_gas
 * iphase_supercritical_liquid = constants_header.iphase_supercritical_liquid
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iphase_supercritical); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iphase_supercritical, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":118
 * iphase_liquid = constants_header.iphase_liquid
 * iphase_supercritical = constants_header.iphase_supercritical
 * iphase_supercritical_gas = constants_header.iphase_supercritical_gas             # <<<<<<<<<<<<<<
 * iphase_supercritical_liquid = constants_header.iphase_supercritical_liquid
 * iphase_critical_point = constants_header.iphase_critical_point
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iphase_supercritical_gas); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iphase_supercritical_gas, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":119
 * iphase_supercritical = constants_header.iphase_supercritical
 * iphase_supercritical_gas = constants_header.iphase_supercritical_gas
 * iphase_supercritical_liquid = constants_header.iphase_supercritical_liquid             # <<<<<<<<<<<<<<
 * iphase_critical_point = constants_header.iphase_critical_point
 * iphase_gas = constants_header.iphase_gas
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iphase_supercritical_liquid); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iphase_supercritical_liquid, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":120
 * iphase_supercritical_gas = constants_header.iphase_supercritical_gas
 * iphase_supercritical_liquid = constants_header.iphase_supercritical_liquid
 * iphase_critical_point = constants_header.iphase_critical_point             # <<<<<<<<<<<<<<
 * iphase_gas = constants_header.iphase_gas
 * iphase_twophase = constants_header.iphase_twophase
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iphase_critical_point); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iphase_critical_point, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":121
 * iphase_supercritical_liquid = constants_header.iphase_supercritical_liquid
 * iphase_critical_point = constants_header.iphase_critical_point
 * iphase_gas = constants_header.iphase_gas             # <<<<<<<<<<<<<<
 * iphase_twophase = constants_header.iphase_twophase
 * iphase_unknown = constants_header.iphase_unknown
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iphase_gas); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iphase_gas, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":122
 * iphase_critical_point = constants_header.iphase_critical_point
 * iphase_gas = constants_header.iphase_gas
 * iphase_twophase = constants_header.iphase_twophase             # <<<<<<<<<<<<<<
 * iphase_unknown = constants_header.iphase_unknown
 * iphase_not_imposed = constants_header.iphase_not_imposed
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iphase_twophase); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iphase_twophase, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":123
 * iphase_gas = constants_header.iphase_gas
 * iphase_twophase = constants_header.iphase_twophase
 * iphase_unknown = constants_header.iphase_unknown             # <<<<<<<<<<<<<<
 * iphase_not_imposed = constants_header.iphase_not_imposed
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iphase_unknown); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iphase_unknown, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":124
 * iphase_twophase = constants_header.iphase_twophase
 * iphase_unknown = constants_header.iphase_unknown
 * iphase_not_imposed = constants_header.iphase_not_imposed             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = PyInt_FromLong(CoolProp::iphase_not_imposed); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iphase_not_imposed, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp\_constants.pyx":1
 * # This file is automatically generated by the generate_constants_module.py script in wrappers/Python.             # <<<<<<<<<<<<<<
 * # DO NOT MODIFY THE CONTENTS OF THIS FILE!
 * cimport constants_header
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init CoolProp._constants", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init CoolProp._constants");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
